/*
 * üéí BOLET√çN POO (1¬∫ DAM) ‚Äî PLANTILLA PARA PRACTICAR
 * ---------------------------------------------------
 * Objetivo: Dar al alumno una estructura ejecutable con men√∫ y tres ejercicios
 * para que IMPLEMENTE el c√≥digo por su cuenta.
 *
 * üîß ¬øC√≥mo usar esta plantilla?
 *   1) Compila y ejecuta este .java: ver√°s un men√∫ con 3 ejercicios.
 *   2) Entra en cada ejercicio y lee el ENUNCIADO.
 *   3) Completa las clases y m√©todos marcados con // TODO siguiendo las pistas.
 *   4) Vuelve a ejecutar y usa los mini-demos para probar tu c√≥digo.
 *
 * Estilo ‚ÄúBetter Comments‚Äù (VS Code):
 *   // ! importante/alerta   // ? pista/duda   // TODO tarea   // * idea/nota   // ‚úÖ logrado
 */

import java.util.*;

public class BoletinPOO_Plantilla {
  private static final Scanner sc = new Scanner(System.in);

  public static void main(String[] args) {
    while (true) {
      System.out.println("\n===============================================");
      System.out.println("   üß≠ MEN√ö ¬∑ Bolet√≠n POO ‚Äî PLANTILLA");
      System.out.println("===============================================");
      System.out.println(" 1) E1 ¬∑ Geometr√≠a Lite (Rect√°ngulo / Cuadrado opcional)");
      System.out.println(" 2) E2 ¬∑ Empresa Lite (Empleado / Directivo con herencia)");
      System.out.println(" 3) E3 ¬∑ CuentaBancaria Lite (ejercicio m√°s sencillo)");
      System.out.println(" 0) Salir");
      System.out.print("Elige opci√≥n: ");
      String op = sc.nextLine().trim();
      switch (op) {
        case "1": E1_GeometriaLite.demo(sc); break;
        case "2": E2_EmpresaLite.demo(sc); break;
        case "3": E3_CuentaBancariaLite.demo(sc); break;
        case "0": System.out.println("¬°Hasta luego!"); return;
        default: System.out.println("Opci√≥n no v√°lida.");
      }
    }
  }

  // =====================================================================================
  // üîπ E1 ¬∑ Geometr√≠a Lite ‚Äî Rect√°ngulo (+ Cuadrado opcional mediante herencia)
  // -------------------------------------------------------------------------------------
  // ENUNCIADO (resumen):
  //   Implementa una clase Rectangulo con:
  //     ‚Ä¢ base y altura (double) ‚Üí deben ser > 0 (si no, corrige a 0.1).
  //     ‚Ä¢ constructores: () y (base, altura).
  //     ‚Ä¢ get/set con validaci√≥n, area(), perimetro(), diagonal(), toString().
  //   OPCIONAL (herencia):
  //     ‚Ä¢ Clase Cuadrado que HEREDA de Rectangulo y asegura base==altura (lado).
  //       - constructor (lado)
  //       - si el alumno cambia base o altura, debe mantenerse la invariantes (opcional).
  //
  // ‚úÖ Objetivos did√°cticos: encapsulaci√≥n, validaci√≥n, m√©todos de c√°lculo, herencia.
  // =====================================================================================
  static class E1_GeometriaLite {

    // TODO: Implementa la clase Rectangulo
    // ? Pistas:
    //   - Campos privados: double base, altura;
    //   - Validaci√≥n en setters (si <=0 ‚Üí 0.1 y avisa con System.out.println)
    //   - area = base*altura; perimetro = 2*(base+altura); diagonal = Math.hypot(base, altura)
    //   - toString(): devuelve algo legible con todos los datos
    static class Rectangulo {
      // private double base;
      // private double altura;

      // public Rectangulo() { /* TODO: valores por defecto (1,1) */ }
      // public Rectangulo(double base, double altura) { /* TODO: usa setters */ }

      // public double getBase() { /* TODO */ return 0; }
      // public void setBase(double base) { /* TODO validaci√≥n */ }

      // public double getAltura() { /* TODO */ return 0; }
      // public void setAltura(double altura) { /* TODO validaci√≥n */ }

      // public double area() { /* TODO */ return 0; }
      // public double perimetro() { /* TODO */ return 0; }
      // public double diagonal() { /* TODO */ return 0; }

      // @Override public String toString() { /* TODO */ return "[Rectangulo]"; }

      // * Puedes a√±adir un m√©todo privado double positivoSeguro(double v, String nombreCampo)
      //   para centralizar la validaci√≥n en los setters.
    }

    // TODO (OPCIONAL): Implementa Cuadrado heredando de Rectangulo
    // ? Pistas:
    //   - Constructor Cuadrado(double lado) llama al super(lado, lado)
    //   - (Opcional) Sobrescribe setBase/setAltura para mantener siempre base==altura
    static class Cuadrado /* extends Rectangulo */ {
      // public Cuadrado(double lado) { /* TODO: super(lado, lado); */ }
      // @Override public String toString() { /* TODO (opcional) */ return "[Cuadrado]"; }
    }

    // Mini demo guiada para que el alumno pruebe su implementaci√≥n
    public static void demo(Scanner sc) {
      System.out.println("\n\u001B[1;36m‚Äî E1: GEOMETR√çA LITE ‚Äî\u001B[0m");
      System.out.println("Enunciado y pistas dentro del c√≥digo. Completa Rectangulo (y Cuadrado opcional).\n");

      System.out.println("\n--- Ejemplo de uso esperado (comentado): ---");
      System.out.println("// Rectangulo r = new Rectangulo(5, 3);\n// System.out.println(r);\n// System.out.printf(\"√Årea: %.2f | Per√≠metro: %.2f | Diagonal: %.2f\\n\", r.area(), r.perimetro(), r.diagonal());\n");

      System.out.println("Pulsa Enter para volver al men√∫...");
      sc.nextLine();
    }
  }

  // =====================================================================================
  // üîπ E2 ¬∑ Empresa Lite ‚Äî Empleado y Directivo (HERENCIA)
  // -------------------------------------------------------------------------------------
  // ENUNCIADO (resumen):
  //   Clase Empleado:
  //     ‚Ä¢ nombre, apellidos, edad, dni, salarioAnual (privados) + IRPF (solo lectura, calculado).
  //     ‚Ä¢ Reglas IRPF (orientativas): <6000 ‚Üí 7.5%; 6000..30000 ‚Üí 15%; >30000 ‚Üí 20%.
  //     ‚Ä¢ Constructores () y (nombre, apellidos, edad, dni, salarioAnual). Setters con validaci√≥n.
  //     ‚Ä¢ dineroHacienda() = salarioAnual * irpf/100. toString().
  //   Clase Directivo (HEREDA de Empleado):
  //     ‚Ä¢ porcentajeBeneficio [0..100].
  //     ‚Ä¢ gananciaDirectivo(beneficioEmpresa) ‚Üí 0 si ‚â§0; si >0 ‚Üí beneficio*(%/100).
  //
  // ‚úÖ Objetivos: encapsulaci√≥n, reglas de negocio, HERENCIA, c√°lculo dependiente de par√°metro.
  // =====================================================================================
  static class E2_EmpresaLite {

    // TODO: Implementa Empleado (clase base)
    static class Empleado {
      // private String nombre, apellidos, dni;
      // private int edad;
      // private double salarioAnual;
      // private double irpf; // calculado autom√°ticamente

      // public Empleado() { /* TODO: valores por defecto */ }
      // public Empleado(String nombre, String apellidos, int edad, String dni, double salarioAnual) {
      //   /* TODO: usar setters; recalcular IRPF cuando cambie salario */
      // }

      // public String getNombre() { /* TODO */ return ""; }
      // public void setNombre(String nombre) { /* TODO: trim/evitar null */ }
      // public String getApellidos() { /* TODO */ return ""; }
      // public void setApellidos(String apellidos) { /* TODO */ }
      // public int getEdad() { /* TODO */ return 0; }
      // public void setEdad(int edad) { /* ! validar >=0 */ }
      // public String getDni() { /* TODO */ return ""; }
      // public void setDni(String dni) { /* TODO */ }
      // public double getSalarioAnual() { /* TODO */ return 0; }
      // public void setSalarioAnual(double salarioAnual) { /* ! validar >=0; recalcularIRPF() */ }
      // public double getIrpf() { /* TODO */ return 0; }

      // private void recalcularIRPF() { /* TODO franjas 7.5 / 15 / 20 */ }
      // public double dineroHacienda() { /* TODO */ return 0; }
      // @Override public String toString() { /* TODO */ return "[Empleado]"; }
    }

    // TODO: Implementa Directivo HEREDANDO de Empleado
    static class Directivo /* extends Empleado */ {
      // private double porcentajeBeneficio; // [0..100]
      // public Directivo() { /* TODO */ }
      // public Directivo(String nombre, String apellidos, int edad, String dni, double salarioAnual, double porcentajeBeneficio) {
      //   /* TODO: llamar a super(...); setPorcentajeBeneficio(...) */
      // }
      // public double getPorcentajeBeneficio() { /* TODO */ return 0; }
      // public void setPorcentajeBeneficio(double v) { /* ! si <0 o >100 ‚Üí ajustar a 0 o lanzar excepci√≥n */ }
      // public double gananciaDirectivo(double beneficioEmpresa) { /* TODO */ return 0; }
      // @Override public String toString() { /* TODO */ return "[Directivo]"; }
    }

    // Mini demo guiada
    public static void demo(Scanner sc) {
      System.out.println("\n\u001B[1;36m‚Äî E2: EMPRESA LITE ‚Äî\u001B[0m");
      System.out.println("Completa Empleado (base) y Directivo (hereda). Usa las franjas de IRPF y el % de beneficio.\n");

      System.out.println("\n--- Ejemplo de uso esperado (comentado): ---");
      System.out.println("// Empleado e = new Empleado(\"Luis\", \"P√©rez\", 30, \"12345678A\", 20000);\n// System.out.println(e);\n// Directivo d = new Directivo(\"Ana\", \"L√≥pez\", 45, \"87654321B\", 40000, 5);\n// System.out.printf(\"Ganancia directivo (beneficio 100k): %.2f‚Ç¨\\n\", d.gananciaDirectivo(100000));\n");

      System.out.println("Pulsa Enter para volver al men√∫...");
      sc.nextLine();
    }
  }

  // =====================================================================================
  // üîπ E3 ¬∑ CuentaBancaria Lite ‚Äî ejercicio m√°s sencillo (sin herencia)
  // -------------------------------------------------------------------------------------
  // ENUNCIADO (resumen):
  //   Implementa una CuentaBancaria con:
  //     ‚Ä¢ titular (String), saldo (double ‚â• 0), limiteRetiradaDiaria (double ‚â• 0, opcional).
  //     ‚Ä¢ constructores: () y (titular, saldoInicial).
  //     ‚Ä¢ m√©todos: ingresar(cant), retirar(cant) con validaci√≥n (cant>0 y saldo suficiente).
  //     ‚Ä¢ toString() legible.
  //   EXTRA (opcional): llevar un registro simple (List<String> movimientos) con apuntes de texto.
  //
  // ‚úÖ Objetivos: validaci√≥n b√°sica, estados coherentes, dise√±o de API simple.
  // =====================================================================================
  static class E3_CuentaBancariaLite {

    // TODO: Implementa la clase CuentaBancaria
    static class CuentaBancaria {
      // private String titular;
      // private double saldo;
      // private double limiteRetiradaDiaria; // * opcional: si no quieres usarlo, ign√≥ralo
      // private List<String> movimientos;    // * opcional

      // public CuentaBancaria() { /* TODO: valores por defecto (\"\", 0) */ }
      // public CuentaBancaria(String titular, double saldoInicial) { /* TODO */ }

      // public String getTitular() { /* TODO */ return ""; }
      // public void setTitular(String titular) { /* TODO: trim/null-safe */ }
      // public double getSaldo() { /* TODO */ return 0; }

      // public void ingresar(double cantidad) { /* ! validar >0; actualizar saldo; registrar movimiento (opcional) */ }
      // public boolean retirar(double cantidad) { /* ! validar >0 y saldo suficiente; aplicar; devolver true/false */ return false; }

      // @Override public String toString() { /* TODO */ return "[CuentaBancaria]"; }

      // * Idea (opcional): String apuntes() ‚Üí une movimientos con \n
    }

    // Mini demo guiada
    public static void demo(Scanner sc) {
      System.out.println("\n\u001B[1;36m‚Äî E3: CUENTA BANCARIA LITE ‚Äî\u001B[0m");
      System.out.println("Implementa CuentaBancaria con ingresar/retirar y validaciones b√°sicas.\n");

      System.out.println("\n--- Ejemplo de uso esperado (comentado): ---");
      System.out.println("// CuentaBancaria c = new CuentaBancaria(\"Alumno\", 100);\n// c.ingresar(50);\n// boolean ok = c.retirar(120); // deber√≠a fallar si no hay saldo suficiente\n// System.out.println(c);\n");

      System.out.println("Pulsa Enter para volver al men√∫...");
      sc.nextLine();
    }
  }

  // =====================================================================================
  // üß© UTILIDADES COMUNES (entrada segura)
  // =====================================================================================
  private static int leerEntero(Scanner sc) {
    while (true) {
      try { return Integer.parseInt(sc.nextLine().trim()); }
      catch (Exception e) { System.out.print("Introduce un entero v√°lido: "); }
    }
  }
  private static double leerDouble(Scanner sc) {
    while (true) {
      try { return Double.parseDouble(sc.nextLine().trim().replace(",", ".")); }
      catch (Exception e) { System.out.print("Introduce un n√∫mero v√°lido: "); }
    }
  }
}